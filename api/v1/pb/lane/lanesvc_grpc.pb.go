// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: lanesvc.proto

package lane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaneClient is the client API for Lane service.
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaneClient interface {
	Networks(ctx context.Context, in *NetworksRequest, opts ...grpc.CallOption) (*NetworksReply, error)
}

type laneClient struct {
	cc grpc.ClientConnInterface
}

func NewLaneClient(cc grpc.ClientConnInterface) LaneClient {
	return &laneClient{cc}
}

func (c *laneClient) Networks(ctx context.Context, in *NetworksRequest, opts ...grpc.CallOption) (*NetworksReply, error) {
	out := new(NetworksReply)
	err := c.cc.Invoke(ctx, "/pb.Lane/Networks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaneServer is the server API for Lane service.
// All implementations must embed UnimplementedLaneServer
// for forward compatibility
type LaneServer interface {
	Networks(context.Context, *NetworksRequest) (*NetworksReply, error)
	mustEmbedUnimplementedLaneServer()
}

// UnimplementedLaneServer must be embedded to have forward compatible implementations.
type UnimplementedLaneServer struct {
}

func (UnimplementedLaneServer) Networks(context.Context, *NetworksRequest) (*NetworksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Networks not implemented")
}
func (UnimplementedLaneServer) mustEmbedUnimplementedLaneServer() {}

// UnsafeLaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaneServer will
// result in compilation errors.
type UnsafeLaneServer interface {
	mustEmbedUnimplementedLaneServer()
}

func RegisterLaneServer(s grpc.ServiceRegistrar, srv LaneServer) {
	s.RegisterService(&Lane_ServiceDesc, srv)
}

func _Lane_Networks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaneServer).Networks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Lane/Networks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaneServer).Networks(ctx, req.(*NetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lane_ServiceDesc is the grpc.ServiceDesc for Lane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Lane",
	HandlerType: (*LaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Networks",
			Handler:    _Lane_Networks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lanesvc.proto",
}
